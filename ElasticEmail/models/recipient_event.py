# coding: utf-8

"""
    Elastic Email REST API

    This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

    The version of the OpenAPI document: 4.0.0
    Contact: support@elasticemail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ElasticEmail.models.event_type import EventType
from ElasticEmail.models.message_category import MessageCategory
from typing import Optional, Set
from typing_extensions import Self

class RecipientEvent(BaseModel):
    """
    Detailed information about message recipient
    """ # noqa: E501
    transaction_id: Optional[StrictStr] = Field(default=None, description="ID number of transaction", alias="TransactionID")
    msg_id: Optional[StrictStr] = Field(default=None, description="ID number of selected message.", alias="MsgID")
    from_email: Optional[StrictStr] = Field(default=None, description="Default From: email address.", alias="FromEmail")
    to: Optional[StrictStr] = Field(default=None, description="Ending date for search in YYYY-MM-DDThh:mm:ss format.", alias="To")
    subject: Optional[StrictStr] = Field(default=None, description="Default subject of email.", alias="Subject")
    event_type: Optional[EventType] = Field(default=None, alias="EventType")
    event_date: Optional[datetime] = Field(default=None, description="Creation date", alias="EventDate")
    channel_name: Optional[StrictStr] = Field(default=None, description="Name of selected channel.", alias="ChannelName")
    message_category: Optional[MessageCategory] = Field(default=None, alias="MessageCategory")
    next_try_on: Optional[datetime] = Field(default=None, description="Date of next try", alias="NextTryOn")
    message: Optional[StrictStr] = Field(default=None, description="Content of message, HTML encoded", alias="Message")
    ip_address: Optional[StrictStr] = Field(default=None, description="IP which this email was sent through", alias="IPAddress")
    pool_name: Optional[StrictStr] = Field(default=None, description="Name of an IP pool this email was sent through", alias="PoolName")
    __properties: ClassVar[List[str]] = ["TransactionID", "MsgID", "FromEmail", "To", "Subject", "EventType", "EventDate", "ChannelName", "MessageCategory", "NextTryOn", "Message", "IPAddress", "PoolName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecipientEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if next_try_on (nullable) is None
        # and model_fields_set contains the field
        if self.next_try_on is None and "next_try_on" in self.model_fields_set:
            _dict['NextTryOn'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecipientEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "TransactionID": obj.get("TransactionID"),
            "MsgID": obj.get("MsgID"),
            "FromEmail": obj.get("FromEmail"),
            "To": obj.get("To"),
            "Subject": obj.get("Subject"),
            "EventType": obj.get("EventType"),
            "EventDate": obj.get("EventDate"),
            "ChannelName": obj.get("ChannelName"),
            "MessageCategory": obj.get("MessageCategory"),
            "NextTryOn": obj.get("NextTryOn"),
            "Message": obj.get("Message"),
            "IPAddress": obj.get("IPAddress"),
            "PoolName": obj.get("PoolName")
        })
        return _obj


