# coding: utf-8

"""
    Elastic Email REST API

    This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

    The version of the OpenAPI document: 4.0.0
    Contact: support@elasticemail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ElasticEmail.models.account_status_enum import AccountStatusEnum
from ElasticEmail.models.subaccount_settings_info import SubaccountSettingsInfo
from typing import Optional, Set
from typing_extensions import Self

class SubAccountInfo(BaseModel):
    """
    Detailed information about SubAccount.
    """ # noqa: E501
    public_account_id: Optional[StrictStr] = Field(default=None, description="Public key for limited access to your Account such as contact/add so you can use it safely on public websites.", alias="PublicAccountID")
    email: Optional[StrictStr] = Field(default=None, description="Proper email address.", alias="Email")
    settings: Optional[SubaccountSettingsInfo] = Field(default=None, alias="Settings")
    last_activity: Optional[datetime] = Field(default=None, description="Date of last activity on Account", alias="LastActivity")
    email_credits: Optional[StrictInt] = Field(default=None, description="Amount of email credits", alias="EmailCredits")
    total_emails_sent: Optional[StrictInt] = Field(default=None, description="Amount of emails sent from this Account", alias="TotalEmailsSent")
    reputation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Numeric reputation", alias="Reputation")
    status: Optional[AccountStatusEnum] = Field(default=None, alias="Status")
    contacts_count: Optional[StrictInt] = Field(default=None, description="How many contacts this SubAccount has stored", alias="ContactsCount")
    __properties: ClassVar[List[str]] = ["PublicAccountID", "Email", "Settings", "LastActivity", "EmailCredits", "TotalEmailsSent", "Reputation", "Status", "ContactsCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubAccountInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['Settings'] = self.settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubAccountInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "PublicAccountID": obj.get("PublicAccountID"),
            "Email": obj.get("Email"),
            "Settings": SubaccountSettingsInfo.from_dict(obj["Settings"]) if obj.get("Settings") is not None else None,
            "LastActivity": obj.get("LastActivity"),
            "EmailCredits": obj.get("EmailCredits"),
            "TotalEmailsSent": obj.get("TotalEmailsSent"),
            "Reputation": obj.get("Reputation"),
            "Status": obj.get("Status"),
            "ContactsCount": obj.get("ContactsCount")
        })
        return _obj


