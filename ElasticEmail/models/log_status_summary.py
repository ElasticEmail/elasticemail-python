# coding: utf-8

"""
    Elastic Email REST API

    This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

    The version of the OpenAPI document: 4.0.0
    Contact: support@elasticemail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LogStatusSummary(BaseModel):
    """
    Summary of log status
    """ # noqa: E501
    recipients: Optional[StrictInt] = Field(default=None, description="Number of recipients", alias="Recipients")
    email_total: Optional[StrictInt] = Field(default=None, description="Number of emails", alias="EmailTotal")
    sms_total: Optional[StrictInt] = Field(default=None, description="Number of SMS", alias="SmsTotal")
    delivered: Optional[StrictInt] = Field(default=None, description="Number of delivered messages", alias="Delivered")
    bounced: Optional[StrictInt] = Field(default=None, description="Number of bounced messages", alias="Bounced")
    in_progress: Optional[StrictInt] = Field(default=None, description="Number of messages in progress", alias="InProgress")
    opened: Optional[StrictInt] = Field(default=None, description="Number of opened messages", alias="Opened")
    clicked: Optional[StrictInt] = Field(default=None, description="Number of clicked messages", alias="Clicked")
    unsubscribed: Optional[StrictInt] = Field(default=None, description="Number of unsubscribed messages", alias="Unsubscribed")
    complaints: Optional[StrictInt] = Field(default=None, description="Number of complaint messages", alias="Complaints")
    inbound: Optional[StrictInt] = Field(default=None, description="Number of inbound messages", alias="Inbound")
    manual_cancel: Optional[StrictInt] = Field(default=None, description="Number of manually cancelled messages", alias="ManualCancel")
    not_delivered: Optional[StrictInt] = Field(default=None, description="Number of messages flagged with 'Not Delivered'", alias="NotDelivered")
    __properties: ClassVar[List[str]] = ["Recipients", "EmailTotal", "SmsTotal", "Delivered", "Bounced", "InProgress", "Opened", "Clicked", "Unsubscribed", "Complaints", "Inbound", "ManualCancel", "NotDelivered"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LogStatusSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LogStatusSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Recipients": obj.get("Recipients"),
            "EmailTotal": obj.get("EmailTotal"),
            "SmsTotal": obj.get("SmsTotal"),
            "Delivered": obj.get("Delivered"),
            "Bounced": obj.get("Bounced"),
            "InProgress": obj.get("InProgress"),
            "Opened": obj.get("Opened"),
            "Clicked": obj.get("Clicked"),
            "Unsubscribed": obj.get("Unsubscribed"),
            "Complaints": obj.get("Complaints"),
            "Inbound": obj.get("Inbound"),
            "ManualCancel": obj.get("ManualCancel"),
            "NotDelivered": obj.get("NotDelivered")
        })
        return _obj


