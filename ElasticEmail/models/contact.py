# coding: utf-8

"""
    Elastic Email REST API

    This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

    The version of the OpenAPI document: 4.0.0
    Contact: support@elasticemail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ElasticEmail.models.consent_data import ConsentData
from ElasticEmail.models.contact_activity import ContactActivity
from ElasticEmail.models.contact_source import ContactSource
from ElasticEmail.models.contact_status import ContactStatus
from typing import Optional, Set
from typing_extensions import Self

class Contact(BaseModel):
    """
    Contact
    """ # noqa: E501
    email: Optional[StrictStr] = Field(default=None, description="Proper email address.", alias="Email")
    status: Optional[ContactStatus] = Field(default=None, alias="Status")
    first_name: Optional[StrictStr] = Field(default=None, description="First name.", alias="FirstName")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name.", alias="LastName")
    custom_fields: Optional[Dict[str, StrictStr]] = Field(default=None, description="A key-value collection of custom contact fields which can be used in the system.", alias="CustomFields")
    consent: Optional[ConsentData] = Field(default=None, alias="Consent")
    source: Optional[ContactSource] = Field(default=None, alias="Source")
    date_added: Optional[datetime] = Field(default=None, description="Date of creation in YYYY-MM-DDThh:ii:ss format", alias="DateAdded")
    date_updated: Optional[datetime] = Field(default=None, description="Last change date", alias="DateUpdated")
    status_change_date: Optional[datetime] = Field(default=None, description="Date of last status change.", alias="StatusChangeDate")
    activity: Optional[ContactActivity] = Field(default=None, alias="Activity")
    __properties: ClassVar[List[str]] = ["Email", "Status", "FirstName", "LastName", "CustomFields", "Consent", "Source", "DateAdded", "DateUpdated", "StatusChangeDate", "Activity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Contact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of consent
        if self.consent:
            _dict['Consent'] = self.consent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of activity
        if self.activity:
            _dict['Activity'] = self.activity.to_dict()
        # set to None if date_updated (nullable) is None
        # and model_fields_set contains the field
        if self.date_updated is None and "date_updated" in self.model_fields_set:
            _dict['DateUpdated'] = None

        # set to None if status_change_date (nullable) is None
        # and model_fields_set contains the field
        if self.status_change_date is None and "status_change_date" in self.model_fields_set:
            _dict['StatusChangeDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Contact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Email": obj.get("Email"),
            "Status": obj.get("Status"),
            "FirstName": obj.get("FirstName"),
            "LastName": obj.get("LastName"),
            "CustomFields": obj.get("CustomFields"),
            "Consent": ConsentData.from_dict(obj["Consent"]) if obj.get("Consent") is not None else None,
            "Source": obj.get("Source"),
            "DateAdded": obj.get("DateAdded"),
            "DateUpdated": obj.get("DateUpdated"),
            "StatusChangeDate": obj.get("StatusChangeDate"),
            "Activity": ContactActivity.from_dict(obj["Activity"]) if obj.get("Activity") is not None else None
        })
        return _obj


