# coding: utf-8

"""
    Elastic Email REST API

    This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

    The version of the OpenAPI document: 4.0.0
    Contact: support@elasticemail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ContactActivity(BaseModel):
    """
    ContactActivity
    """ # noqa: E501
    total_sent: Optional[StrictInt] = Field(default=None, description="Total emails sent.", alias="TotalSent")
    total_opened: Optional[StrictInt] = Field(default=None, description="Total emails opened.", alias="TotalOpened")
    total_clicked: Optional[StrictInt] = Field(default=None, description="Total emails clicked", alias="TotalClicked")
    total_failed: Optional[StrictInt] = Field(default=None, description="Total emails failed.", alias="TotalFailed")
    last_sent: Optional[datetime] = Field(default=None, description="Last date when an email was sent to this contact", alias="LastSent")
    last_opened: Optional[datetime] = Field(default=None, description="Date this contact last opened an email", alias="LastOpened")
    last_clicked: Optional[datetime] = Field(default=None, description="Date this contact last clicked an email", alias="LastClicked")
    last_failed: Optional[datetime] = Field(default=None, description="Last date when an email sent to this contact bounced", alias="LastFailed")
    last_ip: Optional[StrictStr] = Field(default=None, description="IP from which this contact opened or clicked their email last time", alias="LastIP")
    error_code: Optional[StrictInt] = Field(default=None, description="Last RFC Error code if any occurred", alias="ErrorCode")
    friendly_error_message: Optional[StrictStr] = Field(default=None, description="Last RFC error message if any occurred", alias="FriendlyErrorMessage")
    __properties: ClassVar[List[str]] = ["TotalSent", "TotalOpened", "TotalClicked", "TotalFailed", "LastSent", "LastOpened", "LastClicked", "LastFailed", "LastIP", "ErrorCode", "FriendlyErrorMessage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContactActivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if last_sent (nullable) is None
        # and model_fields_set contains the field
        if self.last_sent is None and "last_sent" in self.model_fields_set:
            _dict['LastSent'] = None

        # set to None if last_opened (nullable) is None
        # and model_fields_set contains the field
        if self.last_opened is None and "last_opened" in self.model_fields_set:
            _dict['LastOpened'] = None

        # set to None if last_clicked (nullable) is None
        # and model_fields_set contains the field
        if self.last_clicked is None and "last_clicked" in self.model_fields_set:
            _dict['LastClicked'] = None

        # set to None if last_failed (nullable) is None
        # and model_fields_set contains the field
        if self.last_failed is None and "last_failed" in self.model_fields_set:
            _dict['LastFailed'] = None

        # set to None if error_code (nullable) is None
        # and model_fields_set contains the field
        if self.error_code is None and "error_code" in self.model_fields_set:
            _dict['ErrorCode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContactActivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "TotalSent": obj.get("TotalSent"),
            "TotalOpened": obj.get("TotalOpened"),
            "TotalClicked": obj.get("TotalClicked"),
            "TotalFailed": obj.get("TotalFailed"),
            "LastSent": obj.get("LastSent"),
            "LastOpened": obj.get("LastOpened"),
            "LastClicked": obj.get("LastClicked"),
            "LastFailed": obj.get("LastFailed"),
            "LastIP": obj.get("LastIP"),
            "ErrorCode": obj.get("ErrorCode"),
            "FriendlyErrorMessage": obj.get("FriendlyErrorMessage")
        })
        return _obj


