# coding: utf-8

"""
    Elastic Email REST API

    This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Contact: support@elasticemail.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ElasticEmail import schemas  # noqa: F401


class EmailValidationResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            Account = schemas.StrSchema
            Domain = schemas.StrSchema
            Email = schemas.StrSchema
            SuggestedSpelling = schemas.StrSchema
            Disposable = schemas.BoolSchema
            Role = schemas.BoolSchema
            Reason = schemas.StrSchema
            DateAdded = schemas.DateTimeSchema
        
            @staticmethod
            def Result() -> typing.Type['EmailValidationStatus']:
                return EmailValidationStatus
            __annotations__ = {
                "Account": Account,
                "Domain": Domain,
                "Email": Email,
                "SuggestedSpelling": SuggestedSpelling,
                "Disposable": Disposable,
                "Role": Role,
                "Reason": Reason,
                "DateAdded": DateAdded,
                "Result": Result,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Account"]) -> MetaOapg.properties.Account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Domain"]) -> MetaOapg.properties.Domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Email"]) -> MetaOapg.properties.Email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SuggestedSpelling"]) -> MetaOapg.properties.SuggestedSpelling: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Disposable"]) -> MetaOapg.properties.Disposable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Role"]) -> MetaOapg.properties.Role: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Reason"]) -> MetaOapg.properties.Reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DateAdded"]) -> MetaOapg.properties.DateAdded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Result"]) -> 'EmailValidationStatus': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Account", "Domain", "Email", "SuggestedSpelling", "Disposable", "Role", "Reason", "DateAdded", "Result", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Account"]) -> typing.Union[MetaOapg.properties.Account, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Domain"]) -> typing.Union[MetaOapg.properties.Domain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Email"]) -> typing.Union[MetaOapg.properties.Email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SuggestedSpelling"]) -> typing.Union[MetaOapg.properties.SuggestedSpelling, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Disposable"]) -> typing.Union[MetaOapg.properties.Disposable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Role"]) -> typing.Union[MetaOapg.properties.Role, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Reason"]) -> typing.Union[MetaOapg.properties.Reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DateAdded"]) -> typing.Union[MetaOapg.properties.DateAdded, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Result"]) -> typing.Union['EmailValidationStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Account", "Domain", "Email", "SuggestedSpelling", "Disposable", "Role", "Reason", "DateAdded", "Result", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Account: typing.Union[MetaOapg.properties.Account, str, schemas.Unset] = schemas.unset,
        Domain: typing.Union[MetaOapg.properties.Domain, str, schemas.Unset] = schemas.unset,
        Email: typing.Union[MetaOapg.properties.Email, str, schemas.Unset] = schemas.unset,
        SuggestedSpelling: typing.Union[MetaOapg.properties.SuggestedSpelling, str, schemas.Unset] = schemas.unset,
        Disposable: typing.Union[MetaOapg.properties.Disposable, bool, schemas.Unset] = schemas.unset,
        Role: typing.Union[MetaOapg.properties.Role, bool, schemas.Unset] = schemas.unset,
        Reason: typing.Union[MetaOapg.properties.Reason, str, schemas.Unset] = schemas.unset,
        DateAdded: typing.Union[MetaOapg.properties.DateAdded, str, datetime, schemas.Unset] = schemas.unset,
        Result: typing.Union['EmailValidationStatus', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmailValidationResult':
        return super().__new__(
            cls,
            *args,
            Account=Account,
            Domain=Domain,
            Email=Email,
            SuggestedSpelling=SuggestedSpelling,
            Disposable=Disposable,
            Role=Role,
            Reason=Reason,
            DateAdded=DateAdded,
            Result=Result,
            _configuration=_configuration,
            **kwargs,
        )

from ElasticEmail.model.email_validation_status import EmailValidationStatus
