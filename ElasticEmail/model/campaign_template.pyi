# coding: utf-8

"""
    Elastic Email REST API

    This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Contact: support@elasticemail.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ElasticEmail import schemas  # noqa: F401


class CampaignTemplate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Content of a Campaign
    """


    class MetaOapg:
        
        class properties:
            Poolname = schemas.StrSchema
            _from = schemas.StrSchema
            ReplyTo = schemas.StrSchema
            Subject = schemas.StrSchema
            TemplateName = schemas.StrSchema
            
            
            class AttachFiles(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'AttachFiles':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def Utm() -> typing.Type['Utm']:
                return Utm
            __annotations__ = {
                "Poolname": Poolname,
                "From": _from,
                "ReplyTo": ReplyTo,
                "Subject": Subject,
                "TemplateName": TemplateName,
                "AttachFiles": AttachFiles,
                "Utm": Utm,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Poolname"]) -> MetaOapg.properties.Poolname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["From"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReplyTo"]) -> MetaOapg.properties.ReplyTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Subject"]) -> MetaOapg.properties.Subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TemplateName"]) -> MetaOapg.properties.TemplateName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AttachFiles"]) -> MetaOapg.properties.AttachFiles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Utm"]) -> 'Utm': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Poolname", "From", "ReplyTo", "Subject", "TemplateName", "AttachFiles", "Utm", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Poolname"]) -> typing.Union[MetaOapg.properties.Poolname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["From"]) -> typing.Union[MetaOapg.properties._from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReplyTo"]) -> typing.Union[MetaOapg.properties.ReplyTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Subject"]) -> typing.Union[MetaOapg.properties.Subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TemplateName"]) -> typing.Union[MetaOapg.properties.TemplateName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AttachFiles"]) -> typing.Union[MetaOapg.properties.AttachFiles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Utm"]) -> typing.Union['Utm', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Poolname", "From", "ReplyTo", "Subject", "TemplateName", "AttachFiles", "Utm", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Poolname: typing.Union[MetaOapg.properties.Poolname, str, schemas.Unset] = schemas.unset,
        ReplyTo: typing.Union[MetaOapg.properties.ReplyTo, str, schemas.Unset] = schemas.unset,
        Subject: typing.Union[MetaOapg.properties.Subject, str, schemas.Unset] = schemas.unset,
        TemplateName: typing.Union[MetaOapg.properties.TemplateName, str, schemas.Unset] = schemas.unset,
        AttachFiles: typing.Union[MetaOapg.properties.AttachFiles, list, tuple, schemas.Unset] = schemas.unset,
        Utm: typing.Union['Utm', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CampaignTemplate':
        return super().__new__(
            cls,
            *args,
            Poolname=Poolname,
            ReplyTo=ReplyTo,
            Subject=Subject,
            TemplateName=TemplateName,
            AttachFiles=AttachFiles,
            Utm=Utm,
            _configuration=_configuration,
            **kwargs,
        )

from ElasticEmail.model.utm import Utm
