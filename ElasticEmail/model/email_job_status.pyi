# coding: utf-8

"""
    Elastic Email REST API

    This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Contact: support@elasticemail.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ElasticEmail import schemas  # noqa: F401


class EmailJobStatus(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            ID = schemas.StrSchema
            Status = schemas.StrSchema
            RecipientsCount = schemas.Int32Schema
            
            
            class Failed(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EmailJobFailedStatus']:
                        return EmailJobFailedStatus
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['EmailJobFailedStatus'], typing.List['EmailJobFailedStatus']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Failed':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EmailJobFailedStatus':
                    return super().__getitem__(i)
            FailedCount = schemas.Int32Schema
            
            
            class Sent(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Sent':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            SentCount = schemas.Int32Schema
            
            
            class Delivered(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Delivered':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            DeliveredCount = schemas.Int32Schema
            
            
            class Pending(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Pending':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            PendingCount = schemas.Int32Schema
            
            
            class Opened(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Opened':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            OpenedCount = schemas.Int32Schema
            
            
            class Clicked(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Clicked':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            ClickedCount = schemas.Int32Schema
            
            
            class Unsubscribed(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Unsubscribed':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            UnsubscribedCount = schemas.Int32Schema
            
            
            class AbuseReports(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'AbuseReports':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            AbuseReportsCount = schemas.Int32Schema
            
            
            class MessageIDs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'MessageIDs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "ID": ID,
                "Status": Status,
                "RecipientsCount": RecipientsCount,
                "Failed": Failed,
                "FailedCount": FailedCount,
                "Sent": Sent,
                "SentCount": SentCount,
                "Delivered": Delivered,
                "DeliveredCount": DeliveredCount,
                "Pending": Pending,
                "PendingCount": PendingCount,
                "Opened": Opened,
                "OpenedCount": OpenedCount,
                "Clicked": Clicked,
                "ClickedCount": ClickedCount,
                "Unsubscribed": Unsubscribed,
                "UnsubscribedCount": UnsubscribedCount,
                "AbuseReports": AbuseReports,
                "AbuseReportsCount": AbuseReportsCount,
                "MessageIDs": MessageIDs,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ID"]) -> MetaOapg.properties.ID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Status"]) -> MetaOapg.properties.Status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RecipientsCount"]) -> MetaOapg.properties.RecipientsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Failed"]) -> MetaOapg.properties.Failed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FailedCount"]) -> MetaOapg.properties.FailedCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Sent"]) -> MetaOapg.properties.Sent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SentCount"]) -> MetaOapg.properties.SentCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Delivered"]) -> MetaOapg.properties.Delivered: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DeliveredCount"]) -> MetaOapg.properties.DeliveredCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Pending"]) -> MetaOapg.properties.Pending: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PendingCount"]) -> MetaOapg.properties.PendingCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Opened"]) -> MetaOapg.properties.Opened: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OpenedCount"]) -> MetaOapg.properties.OpenedCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Clicked"]) -> MetaOapg.properties.Clicked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ClickedCount"]) -> MetaOapg.properties.ClickedCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Unsubscribed"]) -> MetaOapg.properties.Unsubscribed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UnsubscribedCount"]) -> MetaOapg.properties.UnsubscribedCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AbuseReports"]) -> MetaOapg.properties.AbuseReports: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AbuseReportsCount"]) -> MetaOapg.properties.AbuseReportsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MessageIDs"]) -> MetaOapg.properties.MessageIDs: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ID", "Status", "RecipientsCount", "Failed", "FailedCount", "Sent", "SentCount", "Delivered", "DeliveredCount", "Pending", "PendingCount", "Opened", "OpenedCount", "Clicked", "ClickedCount", "Unsubscribed", "UnsubscribedCount", "AbuseReports", "AbuseReportsCount", "MessageIDs", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ID"]) -> typing.Union[MetaOapg.properties.ID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Status"]) -> typing.Union[MetaOapg.properties.Status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RecipientsCount"]) -> typing.Union[MetaOapg.properties.RecipientsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Failed"]) -> typing.Union[MetaOapg.properties.Failed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FailedCount"]) -> typing.Union[MetaOapg.properties.FailedCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Sent"]) -> typing.Union[MetaOapg.properties.Sent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SentCount"]) -> typing.Union[MetaOapg.properties.SentCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Delivered"]) -> typing.Union[MetaOapg.properties.Delivered, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DeliveredCount"]) -> typing.Union[MetaOapg.properties.DeliveredCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Pending"]) -> typing.Union[MetaOapg.properties.Pending, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PendingCount"]) -> typing.Union[MetaOapg.properties.PendingCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Opened"]) -> typing.Union[MetaOapg.properties.Opened, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OpenedCount"]) -> typing.Union[MetaOapg.properties.OpenedCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Clicked"]) -> typing.Union[MetaOapg.properties.Clicked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ClickedCount"]) -> typing.Union[MetaOapg.properties.ClickedCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Unsubscribed"]) -> typing.Union[MetaOapg.properties.Unsubscribed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UnsubscribedCount"]) -> typing.Union[MetaOapg.properties.UnsubscribedCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AbuseReports"]) -> typing.Union[MetaOapg.properties.AbuseReports, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AbuseReportsCount"]) -> typing.Union[MetaOapg.properties.AbuseReportsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MessageIDs"]) -> typing.Union[MetaOapg.properties.MessageIDs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ID", "Status", "RecipientsCount", "Failed", "FailedCount", "Sent", "SentCount", "Delivered", "DeliveredCount", "Pending", "PendingCount", "Opened", "OpenedCount", "Clicked", "ClickedCount", "Unsubscribed", "UnsubscribedCount", "AbuseReports", "AbuseReportsCount", "MessageIDs", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ID: typing.Union[MetaOapg.properties.ID, str, schemas.Unset] = schemas.unset,
        Status: typing.Union[MetaOapg.properties.Status, str, schemas.Unset] = schemas.unset,
        RecipientsCount: typing.Union[MetaOapg.properties.RecipientsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Failed: typing.Union[MetaOapg.properties.Failed, list, tuple, schemas.Unset] = schemas.unset,
        FailedCount: typing.Union[MetaOapg.properties.FailedCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Sent: typing.Union[MetaOapg.properties.Sent, list, tuple, schemas.Unset] = schemas.unset,
        SentCount: typing.Union[MetaOapg.properties.SentCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Delivered: typing.Union[MetaOapg.properties.Delivered, list, tuple, schemas.Unset] = schemas.unset,
        DeliveredCount: typing.Union[MetaOapg.properties.DeliveredCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Pending: typing.Union[MetaOapg.properties.Pending, list, tuple, schemas.Unset] = schemas.unset,
        PendingCount: typing.Union[MetaOapg.properties.PendingCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Opened: typing.Union[MetaOapg.properties.Opened, list, tuple, schemas.Unset] = schemas.unset,
        OpenedCount: typing.Union[MetaOapg.properties.OpenedCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Clicked: typing.Union[MetaOapg.properties.Clicked, list, tuple, schemas.Unset] = schemas.unset,
        ClickedCount: typing.Union[MetaOapg.properties.ClickedCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Unsubscribed: typing.Union[MetaOapg.properties.Unsubscribed, list, tuple, schemas.Unset] = schemas.unset,
        UnsubscribedCount: typing.Union[MetaOapg.properties.UnsubscribedCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        AbuseReports: typing.Union[MetaOapg.properties.AbuseReports, list, tuple, schemas.Unset] = schemas.unset,
        AbuseReportsCount: typing.Union[MetaOapg.properties.AbuseReportsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        MessageIDs: typing.Union[MetaOapg.properties.MessageIDs, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmailJobStatus':
        return super().__new__(
            cls,
            *_args,
            ID=ID,
            Status=Status,
            RecipientsCount=RecipientsCount,
            Failed=Failed,
            FailedCount=FailedCount,
            Sent=Sent,
            SentCount=SentCount,
            Delivered=Delivered,
            DeliveredCount=DeliveredCount,
            Pending=Pending,
            PendingCount=PendingCount,
            Opened=Opened,
            OpenedCount=OpenedCount,
            Clicked=Clicked,
            ClickedCount=ClickedCount,
            Unsubscribed=Unsubscribed,
            UnsubscribedCount=UnsubscribedCount,
            AbuseReports=AbuseReports,
            AbuseReportsCount=AbuseReportsCount,
            MessageIDs=MessageIDs,
            _configuration=_configuration,
            **kwargs,
        )

from ElasticEmail.model.email_job_failed_status import EmailJobFailedStatus
