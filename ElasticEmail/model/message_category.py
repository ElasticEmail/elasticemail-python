# coding: utf-8

"""
    Elastic Email REST API

    This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Contact: support@elasticemail.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ElasticEmail import schemas  # noqa: F401


class MessageCategory(
    schemas.EnumBase,
    schemas.StrSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        enum_value_to_name = {
            "Unknown": "UNKNOWN",
            "Ignore": "IGNORE",
            "Spam": "SPAM",
            "BlackListed": "BLACK_LISTED",
            "NoMailbox": "NO_MAILBOX",
            "GreyListed": "GREY_LISTED",
            "Throttled": "THROTTLED",
            "Timeout": "TIMEOUT",
            "ConnectionProblem": "CONNECTION_PROBLEM",
            "SPFProblem": "SPFPROBLEM",
            "AccountProblem": "ACCOUNT_PROBLEM",
            "DNSProblem": "DNSPROBLEM",
            "NotDeliveredCancelled": "NOT_DELIVERED_CANCELLED",
            "CodeError": "CODE_ERROR",
            "ManualCancel": "MANUAL_CANCEL",
            "ConnectionTerminated": "CONNECTION_TERMINATED",
            "NotDelivered": "NOT_DELIVERED",
        }
    
    @schemas.classproperty
    def UNKNOWN(cls):
        return cls("Unknown")
    
    @schemas.classproperty
    def IGNORE(cls):
        return cls("Ignore")
    
    @schemas.classproperty
    def SPAM(cls):
        return cls("Spam")
    
    @schemas.classproperty
    def BLACK_LISTED(cls):
        return cls("BlackListed")
    
    @schemas.classproperty
    def NO_MAILBOX(cls):
        return cls("NoMailbox")
    
    @schemas.classproperty
    def GREY_LISTED(cls):
        return cls("GreyListed")
    
    @schemas.classproperty
    def THROTTLED(cls):
        return cls("Throttled")
    
    @schemas.classproperty
    def TIMEOUT(cls):
        return cls("Timeout")
    
    @schemas.classproperty
    def CONNECTION_PROBLEM(cls):
        return cls("ConnectionProblem")
    
    @schemas.classproperty
    def SPFPROBLEM(cls):
        return cls("SPFProblem")
    
    @schemas.classproperty
    def ACCOUNT_PROBLEM(cls):
        return cls("AccountProblem")
    
    @schemas.classproperty
    def DNSPROBLEM(cls):
        return cls("DNSProblem")
    
    @schemas.classproperty
    def NOT_DELIVERED_CANCELLED(cls):
        return cls("NotDeliveredCancelled")
    
    @schemas.classproperty
    def CODE_ERROR(cls):
        return cls("CodeError")
    
    @schemas.classproperty
    def MANUAL_CANCEL(cls):
        return cls("ManualCancel")
    
    @schemas.classproperty
    def CONNECTION_TERMINATED(cls):
        return cls("ConnectionTerminated")
    
    @schemas.classproperty
    def NOT_DELIVERED(cls):
        return cls("NotDelivered")
