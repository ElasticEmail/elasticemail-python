# coding: utf-8

"""
    Elastic Email REST API

    This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

    The version of the OpenAPI document: 4.0.0
    Contact: support@elasticemail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ElasticEmail.models.sub_account_info import SubAccountInfo

class TestSubAccountInfo(unittest.TestCase):
    """SubAccountInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SubAccountInfo:
        """Test SubAccountInfo
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SubAccountInfo`
        """
        model = SubAccountInfo()
        if include_optional:
            return SubAccountInfo(
                public_account_id = 'EB3EBB7A-C20D-4D39-8F2F-5E6842F58E6F',
                email = 'mail@example.com',
                settings = ElasticEmail.models.subaccount_settings_info.SubaccountSettingsInfo(
                    email = ElasticEmail.models.subaccount_email_settings.SubaccountEmailSettings(
                        monthly_refill_credits = 1000, 
                        requires_email_credits = True, 
                        email_size_limit = 10, 
                        daily_send_limit = 100000, 
                        max_contacts = 56, 
                        enable_private_ip_purchase = True, 
                        pool_name = 'My Custom Pool', 
                        valid_sender_domain_only = True, ), ),
                last_activity = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                email_credits = 1000,
                total_emails_sent = 1000,
                reputation = 100,
                status = 'Disabled',
                contacts_count = 56
            )
        else:
            return SubAccountInfo(
        )
        """

    def testSubAccountInfo(self):
        """Test SubAccountInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
